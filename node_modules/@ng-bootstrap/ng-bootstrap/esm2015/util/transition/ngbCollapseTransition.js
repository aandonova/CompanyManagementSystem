import { reflow } from '../util';
function measureCollapsingElementHeightPx(element) {
    // SSR fix for without injecting the PlatformId
    if (typeof navigator === 'undefined') {
        return '0px';
    }
    const { classList } = element;
    const hasShownClass = classList.contains('show');
    if (!hasShownClass) {
        classList.add('show');
    }
    element.style.height = '';
    const height = element.getBoundingClientRect().height + 'px';
    if (!hasShownClass) {
        classList.remove('show');
    }
    return height;
}
export const ngbCollapsingTransition = (element, context) => {
    let { direction, maxHeight } = context;
    const { classList } = element;
    // No maxHeight -> running the transition for the first time
    if (!maxHeight) {
        maxHeight = measureCollapsingElementHeightPx(element);
        context.maxHeight = maxHeight;
        // Fix the height before starting the animation
        element.style.height = direction !== 'show' ? maxHeight : '0px';
        classList.remove('collapse');
        classList.remove('collapsing');
        classList.remove('show');
        reflow(element);
        // Start the animation
        classList.add('collapsing');
    }
    // Start or revert the animation
    element.style.height = direction === 'show' ? maxHeight : '0px';
    return () => {
        classList.remove('collapsing');
        classList.add('collapse');
        if (direction === 'show') {
            classList.add('show');
        }
        else {
            classList.remove('show');
        }
        element.style.height = '';
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdiQ29sbGFwc2VUcmFuc2l0aW9uLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tb2tvcm9rb3YvRGV2L0FuZ3VsYXIvY29yZS9zcmMvIiwic291cmNlcyI6WyJ1dGlsL3RyYW5zaXRpb24vbmdiQ29sbGFwc2VUcmFuc2l0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFPL0IsU0FBUyxnQ0FBZ0MsQ0FBQyxPQUFvQjtJQUM1RCwrQ0FBK0M7SUFDL0MsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLEVBQUU7UUFDcEMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sRUFBQyxTQUFTLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFDNUIsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkI7SUFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDMUIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUU3RCxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDMUI7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQ2hDLENBQUMsT0FBb0IsRUFBRSxPQUF1QixFQUFFLEVBQUU7SUFDaEQsSUFBSSxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFDckMsTUFBTSxFQUFDLFNBQVMsRUFBQyxHQUFHLE9BQU8sQ0FBQztJQUU1Qiw0REFBNEQ7SUFDNUQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLFNBQVMsR0FBRyxnQ0FBZ0MsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUU5QiwrQ0FBK0M7UUFDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFaEUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QixTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9CLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWhCLHNCQUFzQjtRQUN0QixTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzdCO0lBRUQsZ0NBQWdDO0lBQ2hDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRWhFLE9BQU8sR0FBRyxFQUFFO1FBQ1YsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvQixTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFCLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRTtZQUN4QixTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTCxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdiVHJhbnNpdGlvblN0YXJ0Rm59IGZyb20gJy4vbmdiVHJhbnNpdGlvbic7XG5pbXBvcnQge3JlZmxvd30gZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmdiQ29sbGFwc2VDdHgge1xuICBkaXJlY3Rpb246ICdzaG93JyB8ICdoaWRlJztcbiAgbWF4SGVpZ2h0Pzogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBtZWFzdXJlQ29sbGFwc2luZ0VsZW1lbnRIZWlnaHRQeChlbGVtZW50OiBIVE1MRWxlbWVudCk6IHN0cmluZyB7XG4gIC8vIFNTUiBmaXggZm9yIHdpdGhvdXQgaW5qZWN0aW5nIHRoZSBQbGF0Zm9ybUlkXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAnMHB4JztcbiAgfVxuXG4gIGNvbnN0IHtjbGFzc0xpc3R9ID0gZWxlbWVudDtcbiAgY29uc3QgaGFzU2hvd25DbGFzcyA9IGNsYXNzTGlzdC5jb250YWlucygnc2hvdycpO1xuICBpZiAoIWhhc1Nob3duQ2xhc3MpIHtcbiAgICBjbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gIH1cblxuICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICcnO1xuICBjb25zdCBoZWlnaHQgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCArICdweCc7XG5cbiAgaWYgKCFoYXNTaG93bkNsYXNzKSB7XG4gICAgY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICB9XG5cbiAgcmV0dXJuIGhlaWdodDtcbn1cblxuZXhwb3J0IGNvbnN0IG5nYkNvbGxhcHNpbmdUcmFuc2l0aW9uOiBOZ2JUcmFuc2l0aW9uU3RhcnRGbjxOZ2JDb2xsYXBzZUN0eD4gPVxuICAgIChlbGVtZW50OiBIVE1MRWxlbWVudCwgY29udGV4dDogTmdiQ29sbGFwc2VDdHgpID0+IHtcbiAgICAgIGxldCB7ZGlyZWN0aW9uLCBtYXhIZWlnaHR9ID0gY29udGV4dDtcbiAgICAgIGNvbnN0IHtjbGFzc0xpc3R9ID0gZWxlbWVudDtcblxuICAgICAgLy8gTm8gbWF4SGVpZ2h0IC0+IHJ1bm5pbmcgdGhlIHRyYW5zaXRpb24gZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICBpZiAoIW1heEhlaWdodCkge1xuICAgICAgICBtYXhIZWlnaHQgPSBtZWFzdXJlQ29sbGFwc2luZ0VsZW1lbnRIZWlnaHRQeChlbGVtZW50KTtcbiAgICAgICAgY29udGV4dC5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cbiAgICAgICAgLy8gRml4IHRoZSBoZWlnaHQgYmVmb3JlIHN0YXJ0aW5nIHRoZSBhbmltYXRpb25cbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBkaXJlY3Rpb24gIT09ICdzaG93JyA/IG1heEhlaWdodCA6ICcwcHgnO1xuXG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNlJyk7XG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNpbmcnKTtcbiAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuXG4gICAgICAgIHJlZmxvdyhlbGVtZW50KTtcblxuICAgICAgICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gICAgICAgIGNsYXNzTGlzdC5hZGQoJ2NvbGxhcHNpbmcnKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhcnQgb3IgcmV2ZXJ0IHRoZSBhbmltYXRpb25cbiAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gZGlyZWN0aW9uID09PSAnc2hvdycgPyBtYXhIZWlnaHQgOiAnMHB4JztcblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2luZycpO1xuICAgICAgICBjbGFzc0xpc3QuYWRkKCdjb2xsYXBzZScpO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnc2hvdycpIHtcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH07XG4gICAgfTtcbiJdfQ==